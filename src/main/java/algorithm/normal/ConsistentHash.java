package algorithm.normal;

/**
 * 一致性哈希算法
 *      一致性Hash算法也是使用取模的方法
 *      只是，刚才描述的取模法是对服务器的数量进行取模，而一致性Hash算法是对2^32取模。
 *      简单来说，一致性Hash算法将整个哈希值空间组织成一个虚拟的圆环。
 *          ·如假设某哈希函数H的值空间为 [0, 2^32-1]（即哈希值是一个32位无符号整形）
 *          ·整个空间按顺时针方向组织，圆环的正上方的点代表0，0点右侧的第一个点代表1，以此类推，2、3、4、5、6……直到2^32-1，也就是说0点左侧的第一个点代表2^32-1， 0和2^32-1在零点中方向重合
 *          ·我们把这个由2^32个点组成的圆环称为Hash环。
 *      ·以顺时针的方向计算，将所有对象存储到离自己最近的机器中
 *
 *      一致性哈希是对数据和节点同时做了哈希，然后通过一个环形的地址空间找到对应的映射，避免了节点增删时的大量的地址变动。
 *
 * Ketama的Hash算法，虚拟节点思想
 *
 */
public class ConsistentHash {

    public static void main(String[] args) {
        long a = 789465431684L;
        long result = a >>> 32;
        System.out.println(result);
        System.out.println(2L << 32);
        System.out.println(a / (2L << 31));
    }
}
