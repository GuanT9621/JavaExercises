package thread;

/**
 * 多线程调用对象实例时的安全问题
 *      总的来说
 *      一。有成员变量是不安全的，没有成员变量是安全的。
 *      二。jvm每个线程都拥有一个方法调用栈，用于跟踪线程中运行的一系列方法调用过程，
 *          栈中的每个元素成为栈帧，线程调用每个方法时会将方法栈压入一个新帧，
 *          帧里面存放方法参数，局部变量，运算过程产生的临时数据。
 *
 *      1 多线程调用单例类中一个的方法
 *            多线程们是不会排队的，因为jvm在每个线程下，都有一份对调用方法的引用。
 *      2 多个线程调用的同一个对象的同一个方法
 *            同一个实例里，成员变量是共享的，局部变量不共享。
 *            如果方法里无成员变量，不受任何影响
 *            如果方法里有成员变量，只有读操作，不受影响，存在赋值操作，有影响。
 *      3 多线程调用类的静态方法同上。
 *      4 多线程调用不同实例的同一个方法
 *            无论有无成员变量都不会受影响。
 *
 */
public class SafeTest {

    /**
     * 顺着上面所说的谈谈 Action（默认多例） 和 SpringController（默认单例）的区别
     *
     * 为什么spring要默认是单例呢？事实上 Spring 所有 Bean 都是默认单例的。
     *      为了性能。为了GC。为了更好的管理对象。
     *
     * 最佳实践：
     *      1、不要在 controller 中定义成员变量。
     *      2、万一必须要定义一个非静态成员变量时候，则通过注解@Scope("prototype")，将其设置为多例模式
     *
     */
}
