package leetcode;

/**
 * 双指针
 * 双指针卡尺
 * 滑动窗口
 *      例如 N1984
 * 栈的活用
 *      例如 S_Calc
 * 单调栈
 *      例如 S_firstMax
 * 双栈法
 *
 * 递归（几乎所有的树，都需要递归）
 *
 * 回溯 = 深度优先搜索 -> 递归(例如全排列)
 *      例如 8皇后问题，
 *
 * DFS Deep First Search 深度优先搜索
 *      例如 N655_m
 * BFS Breath First Search 广度优先搜索
 *      例如 S_PrintTree
 * 记忆化搜索
 *      例如 N688
 * 动态规划
 *      例如 N64 N198 爬楼梯 N70，背包问题，零钱问题 N322, N518
 *      动态规划转移方程，边界条件，动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法
 *      动态规划的全部情况依次展开，其实就是一棵树，就可以使用 dfs 来暴力解决，然后就可以使用记忆化搜索进行效率优化，最后就是动态规划。
 * 自动机
 *      例如 N8
 * 前缀树
 *      例如 N208 N677
 * 异或计算
 *      例如 N1720 N1734
 * 全排列
 *      例如 N491难点
 *
 *
 *
 *
 *
 *
 *
 */
/** 时间复杂度：如果一个算法的执行次数是 T(n)，那么只保留最高次项，同时忽略最高项的系数后得到函数 f(n)，此时算法的时间复杂度就是 O(f(n)) */
/**
 * 未处理的题目 N1719-树的构建 N906
 * TODO 1927 688
 */
public class N0 { }
